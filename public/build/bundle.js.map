{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nfunction split_css_unit(value) {\n    const split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];\n}\nconst contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\n/**\n * Resize observer singleton.\n * One listener per element only!\n * https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ\n */\nclass ResizeObserverSingleton {\n    constructor(options) {\n        this.options = options;\n        this._listeners = 'WeakMap' in globals ? new WeakMap() : undefined;\n    }\n    observe(element, listener) {\n        this._listeners.set(element, listener);\n        this._getObserver().observe(element, this.options);\n        return () => {\n            this._listeners.delete(element);\n            this._observer.unobserve(element); // this line can probably be removed\n        };\n    }\n    _getObserver() {\n        var _a;\n        return (_a = this._observer) !== null && _a !== void 0 ? _a : (this._observer = new ResizeObserver((entries) => {\n            var _a;\n            for (const entry of entries) {\n                ResizeObserverSingleton.entries.set(entry.target, entry);\n                (_a = this._listeners.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n            }\n        }));\n    }\n}\n// Needs to be written like this to pass the tree-shake-test\nResizeObserverSingleton.entries = 'WeakMap' in globals ? new WeakMap() : undefined;\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction comment(content) {\n    return document.createComment(content);\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_immediate_propagation(fn) {\n    return function (event) {\n        event.stopImmediatePropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction set_dynamic_element_data(tag) {\n    return (/-/.test(tag)) ? set_custom_element_data_map : set_attributes;\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction init_binding_group(group) {\n    let _inputs;\n    return {\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            _inputs.forEach(input => group.push(input));\n        },\n        /* remove */ r() {\n            _inputs.forEach(input => group.splice(group.indexOf(input), 1));\n        }\n    };\n}\nfunction init_binding_group_dynamic(group, indexes) {\n    let _group = get_binding_group(group);\n    let _inputs;\n    function get_binding_group(group) {\n        for (let i = 0; i < indexes.length; i++) {\n            group = group[indexes[i]] = group[indexes[i]] || [];\n        }\n        return group;\n    }\n    function push() {\n        _inputs.forEach(input => _group.push(input));\n    }\n    function remove() {\n        _inputs.forEach(input => _group.splice(_group.indexOf(input), 1));\n    }\n    return {\n        /* update */ u(new_indexes) {\n            indexes = new_indexes;\n            const new_group = get_binding_group(group);\n            if (new_group !== _group) {\n                remove();\n                _group = new_group;\n                push();\n            }\n        },\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            push();\n        },\n        /* remove */ r: remove\n    };\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction claim_comment(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 8, (node) => {\n        node.data = '' + data;\n        return undefined;\n    }, () => comment(data), true);\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    text.data = data;\n}\nfunction set_data_contenteditable(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable(text, data);\n    }\n    else {\n        set_data(text, data);\n    }\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value == null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value, mounting) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    if (!mounting || value !== undefined) {\n        select.selectedIndex = -1; // no option should be selected\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked');\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_iframe_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n            // see https://github.com/sveltejs/svelte/issues/4233\n            fn();\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nconst resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'content-box' });\nconst resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'border-box' });\nconst resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'device-pixel-content-box' });\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            /** #7364  target for <template> may be provided as #document-fragment(11) */\n            else\n                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));\n            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n */\nfunction flush_render_callbacks(fns) {\n    const filtered = [];\n    const targets = [];\n    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n    targets.forEach((c) => c());\n    render_callbacks = filtered;\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    const updates = [];\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            // defer updates until all the DOM shuffling is done\n            updates.push(() => block.p(child_ctx, dirty));\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    run_all(updates);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst _boolean_attributes = [\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n];\n/**\n * List of HTML boolean attributes (e.g. `<input disabled>`).\n * Source: https://html.spec.whatwg.org/multipage/indices.html\n */\nconst boolean_attributes = new Set([..._boolean_attributes]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        flush_render_callbacks($$.after_update);\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    if (has_stop_immediate_propagation)\n        modifiers.push('stopImmediatePropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_contenteditable_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable_dev(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable_dev(text, data);\n    }\n    else {\n        set_data_dev(text, data);\n    }\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, ResizeObserverSingleton, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_iframe_resize_listener, add_location, add_render_callback, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_comment, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, comment, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, contenteditable_truthy_values, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, flush_render_callbacks, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, init_binding_group, init_binding_group_dynamic, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, resize_observer_border_box, resize_observer_content_box, resize_observer_device_pixel_content_box, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_contenteditable, set_data_contenteditable_dev, set_data_dev, set_data_maybe_contenteditable, set_data_maybe_contenteditable_dev, set_dynamic_element_data, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, split_css_unit, spread, src_url_equal, start_hydrating, stop_immediate_propagation, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier} [start]\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=} start\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0 && stop) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let started = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (started) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        started = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n            // We need to set this to false because callbacks can still happen despite having unsubscribed:\n            // Callbacks might already be placed in the queue which doesn't know it should no longer\n            // invoke this derived store.\n            started = false;\n        };\n    });\n}\n/**\n * Takes a store and returns a new one derived from the old one that is readable.\n *\n * @param store - store to make readonly\n */\nfunction readonly(store) {\n    return {\n        subscribe: store.subscribe.bind(store)\n    };\n}\n\nexport { derived, readable, readonly, writable };\n","<script>\n  import { linear } from 'svelte/easing';\n\timport { writable } from 'svelte/store';\n  \n\tlet controlPoints = writable([]);\n\tlet paths = writable([]);\n\n\tlet x = 0;\n\tlet y = 0;\n\n\tlet displayLength = 18;\n\tlet displayWidth = 18;\n\n\tlet robotLength = 18;\n\tlet robotWidth = 18;\n\n\tlet robotUnits = 'inches';\n\n\t$: {\n\t\tconst conversionFactor = robotUnits === 'inches' ? 1 : 2.54;\n\t\trobotLength = displayLength / conversionFactor;\n\t\trobotWidth = displayWidth / conversionFactor;\n\t}\n\n\tfunction getRandomBrightColor() {\n\t\tconst r = Math.floor(Math.random() * 128 + 128);\n\t\tconst g = Math.floor(Math.random() * 128 + 128);\n\t\tconst b = Math.floor(Math.random() * 128 + 128);\n\t\treturn `rgb(${r}, ${g}, ${b})`;\n\t}\n  \n\tfunction generateBezierCurve(pathId) {\n\t\tpaths.update(paths => {\n\t\t\tconst path = paths.find(p => p.id === pathId);\n\t\t\tif (path) {\n\t\t\t\tpath.bezierCurvePoints = calculateBezier(path.controlPoints, 100);\n\t\t\t}\n\t\t\treturn paths;\n\t\t});\n\t}\n  \n\tfunction calculateBezier(points, steps) {\n\t\tlet curve = [];\n\t\tfor (let t = 0; t <= 1; t += 1 / steps) {\n\t\t\tcurve.push(deCasteljau(points, t));\n\t\t}\n\t\tcurve.push(points[points.length - 1]);\n\t\treturn curve;\n\t}\n  \n\tfunction deCasteljau(points, t) {\n\t\tif (points.length === 1) return points[0];\n\t\tlet newPoints = [];\n\t\tfor (let i = 0; i < points.length - 1; i++) {\n\t\t\tlet x = (1 - t) * points[i].x + t * points[i + 1].x;\n\t\t\tlet y = (1 - t) * points[i].y + t * points[i + 1].y;\n\t\t\tnewPoints.push({ x, y });\n\t\t}\n\t\treturn deCasteljau(newPoints, t);\n\t}\n  \n\tfunction exportControlPoints() {\n\t\tconst data = $paths.map(path => ({\n\t\t\tid: path.id,\n\t\t\tcontrolPoints: path.controlPoints,\n\t\t\tcolor: path.color\n\t\t}));\n\t\tconst json = JSON.stringify(data, null, 2);\n\t\tconst blob = new Blob([json], { type: 'application/json' });\n\t\tconst url = URL.createObjectURL(blob);\n\t\tconst link = document.createElement('a');\n\t\tlink.href = url;\n\t\tlink.download = 'paths.json';\n\t\tlink.click();\n\t}\n\n\tfunction importControlPoints() {\n\t\tconst input = document.createElement('input');\n\t\tinput.type = 'file';\n\t\tinput.accept = '.json';\n\t\tinput.onchange = async (event) => {\n\t\t\tconst file = event.target.files[0];\n\t\t\tconst text = await file.text();\n\t\t\tconst data = JSON.parse(text);\n\t\t\tpaths.set(data.map((path, index) => ({\n\t\t\t\t...path,\n\t\t\t\tid: index\n\t\t\t})));\n\t\t\tdata.forEach((path, index) => generateBezierCurve(index));\n\t\t\tupdateRobotPosition();\n\t\t};\n\t\tinput.click();\n\t}\n\n\tfunction addPath() {\n\t\tpaths.update(paths => {\n\t\t\tconst newPath = {\n\t\t\t\tid: paths.length,\n\t\t\t\tcontrolPoints: [],\n\t\t\t\tbezierCurvePoints: [],\n\t\t\t\tcolor: getRandomBrightColor(),\n\t\t\t\trobotHeading: 'tangential' // default heading\n\t\t\t};\n\t\t\tif (paths.length > 0) {\n\t\t\t\tconst lastPath = paths[paths.length - 1];\n\t\t\t\tif (lastPath.controlPoints.length > 0) {\n\t\t\t\t\tconst lastControlPoint = lastPath.controlPoints[lastPath.controlPoints.length - 1];\n\t\t\t\t\tconst angle = Math.random() * 2 * Math.PI;\n\t\t\t\t\tconst distance = 50;\n\t\t\t\t\tconst x = 72 + Math.cos(angle) * distance;\n\t\t\t\t\tconst y = 72 + Math.sin(angle) * distance;\n\t\t\t\t\tnewPath.controlPoints.push({ x: lastControlPoint.x, y: lastControlPoint.y });\n\t\t\t\t\tnewPath.controlPoints.push({ x, y });\n\t\t\t\t}\n\t\t\t} else if (paths.length === 0) {\n\t\t\t\tnewPath.controlPoints.push({ x: 12, y: 96 });\n\t\t\t\tnewPath.controlPoints.push({ x: 36, y: 96 });\n\t\t\t}\n\t\t\treturn [...paths, newPath];\n\t\t});\n\t}\n\n\tfunction addControlPointToPathWithIndex(pathId, index) {\n\t\tpaths.update(paths => {\n\t\t\tconst path = paths.find(p => p.id === pathId);\n\t\t\tconsole.log(path.controlPoints);\n\t\t\tif (path) {\n\t\t\t\tconst angle = Math.random() * 2 * Math.PI;\n\t\t\t\tconst distance = 50;\n\t\t\t\tx = 72 + Math.cos(angle) * distance;\n\t\t\t\ty = 72 + Math.sin(angle) * distance;\n\t\t\t\tpath.controlPoints.splice(index, 0, { x, y });\n\t\t\t\tpath.bezierCurvePoints = calculateBezier(path.controlPoints, 100);\n\t\t\t}\n\t\t\tconsole.log(path.controlPoints);\n\n\t\t\treturn paths;\n\t\t});\n\t}\n\n\tfunction updatePathColor(pathId, color) {\n\t\tpaths.update(paths => {\n\t\t\tconst path = paths.find(p => p.id === pathId);\n\t\t\tif (path) {\n\t\t\t\tpath.color = color;\n\t\t\t}\n\t\t\treturn paths;\n\t\t});\n\t}\n\n\tfunction deletePath(pathId) {\n\t\tpaths.update(paths => {\n\t\t\tconst updatedPaths = paths.filter(path => path.id !== pathId);\n\t\t\tupdatedPaths.forEach((path, index) => {\n\t\t\t\tpath.id = index;\n\t\t\t});\n\t\t\treturn updatedPaths;\n\t\t});\n\t}\n\n\tlet scrubValue = 0;\n\tlet robotX = 12;\n\tlet robotY = 96;\n\n\t// function updateRobotPosition() {\n\t// \tlet totalPoints = 0;\n\t// \t$paths.forEach(path => {\n\t// \t\ttotalPoints += path.bezierCurvePoints.length;\n\t// \t});\n\n\t// \tlet accumulatedPoints = 0;\n\t// \tfor (let path of $paths) {\n\t// \t\tif (scrubValue <= (accumulatedPoints + path.bezierCurvePoints.length) / totalPoints * 100) {\n\t// \t\t\tconst relativeScrubValue = (scrubValue - accumulatedPoints / totalPoints * 100) / (path.bezierCurvePoints.length / totalPoints * 100);\n\t// \t\t\tconst pointIndex = Math.floor(relativeScrubValue * (path.bezierCurvePoints.length - 1));\n\t// \t\t\tconst point = path.bezierCurvePoints[pointIndex];\n\t// \t\t\tif (point) {\n\t// \t\t\t\trobotX = point.x;\n\t// \t\t\t\trobotY = point.y;\n\t// \t\t\t}\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\taccumulatedPoints += path.bezierCurvePoints.length;\n\t// \t}\n\t// }\n\n\n\tlet isPlaying = false;\n\tlet wasPaused = false;\n\tlet isStartingFromBeginning = true;\n\t$: animTime = 1.56 * $paths.length;\n\tlet intervalId = null;\n\tlet animInterval = 1;\n\tlet progress = 0;\n\tlet elapsedTime = 0;\n\tlet path = null;\n\tlet pathAnimTime = 0;\n\tlet linearScrubValue = 0;\n\tlet motionBlurAmount = 0.02; \n\tlet currentPathIndex = 0;\n\tlet pathStartTime = 0;\n\tlet shouldRepeatPath = true;\n\n\tfunction playPath() {\n\t\tif (isPlaying) return;\n\t\tisPlaying = true;\n\t\n\t\tcurrentPathIndex = isStartingFromBeginning ? 0 : Math.floor(scrubValue / 100 * $paths.length);\n\t\tpathStartTime = Date.now() - (isStartingFromBeginning ? 0 : (scrubValue % (100 / $paths.length)) / 100 * animTime * 1000);\n\n\t\tif (wasPaused) {\n\t\t\tpathStartTime = Date.now() - (progress * pathAnimTime * 1000);\n\t\t}\n\n\t\tintervalId = setInterval(() => {\n\t\t\telapsedTime = (Date.now() - pathStartTime) / 1000;\n\t\t\tpath = $paths[currentPathIndex];\n\t\t\tpathAnimTime = animTime / $paths.length;\n\t\t\tprogress = elapsedTime / pathAnimTime;\n\n\t\t\tlinearScrubValue = ((currentPathIndex + progress) / $paths.length) * 100;\n\n\t\t\tif (progress < 0.5) {\n\t\t\t\tprogress = 2 * progress * progress;\n\t\t\t} else {\n\t\t\t\tprogress = -1 + (4 - 2 * progress) * progress;\n\t\t\t}\n\n\t\t\tscrubValue = ((currentPathIndex + progress) / $paths.length) * 100;\n\t\t\tupdateRobotPosition();\n\n\t\t\tif (elapsedTime >= pathAnimTime) {\n\t\t\t\tif (currentPathIndex + 1 >= $paths.length) {\n\t\t\t\t\tif (shouldRepeatPath) {\n\t\t\t\t\t\tcurrentPathIndex = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpausePath();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcurrentPathIndex++;\n\t\t\t\t}\n\t\t\t\tpathStartTime = Date.now();\n\t\t\t}\n\t\t}, animInterval);\n\t}\n\n\tfunction updateRobotPosition() {\n\t\tlet totalPoints = 0;\n\t\t$paths.forEach(path => {\n\t\t\ttotalPoints += path.bezierCurvePoints.length;\n\t\t});\n\n\t\tlet accumulatedPoints = 0;\n\t\tfor (let path of $paths) {\n\t\t\tif (scrubValue <= (accumulatedPoints + path.bezierCurvePoints.length) / totalPoints * 100) {\n\t\t\t\tconst relativeScrubValue = (scrubValue - accumulatedPoints / totalPoints * 100) / (path.bezierCurvePoints.length / totalPoints * 100);\n\t\t\t\tconst pointIndex = Math.floor(relativeScrubValue * (path.bezierCurvePoints.length - 1));\n\t\t\t\tconst point = path.bezierCurvePoints[pointIndex];\n\t\t\t\tif (point) {\n\t\t\t\t\trobotX = point.x;\n\t\t\t\t\trobotY = point.y;\n\n\t\t\t\t\tconst robotElement = document.getElementById('robot');\n\t\t\t\t\tif (robotElement) {\n\t\t\t\t\t\tif (path.robotHeading === 'tangential') {\n\t\t\t\t\t\t\tconst nextPoint = path.bezierCurvePoints[Math.min(pointIndex + 1, path.bezierCurvePoints.length - 1)];\n                            const prevPoint = path.bezierCurvePoints[Math.max(pointIndex - 1, 0)];\n                            const angle = Math.atan2(nextPoint.y - prevPoint.y, nextPoint.x - prevPoint.x);\n                            robotElement.style.transform = `translate(-50%, 50%) rotate(${-angle + Math.PI / 2}rad)`;\n\t\t\t\t\t\t} else if (path.robotHeading === 'linear') {\n\t\t\t\t\t\t\tconst startAngle = path.startAngle || 0;\n\t\t\t\t\t\t\tconst endAngle = path.endAngle || 0;\n\t\t\t\t\t\t\tconst angle = startAngle - (endAngle - startAngle) * relativeScrubValue;\n\t\t\t\t\t\t\trobotElement.style.transform = `translate(-50%, 50%) rotate(${angle + Math.PI / 2}rad)`;\n\t\t\t\t\t\t} else if (path.robotHeading === 'constant') {\n\t\t\t\t\t\t\tconst angle = path.constantAngle || 0;\n\t\t\t\t\t\t\trobotElement.style.transform = `translate(-50%, 50%) rotate(${-angle + Math.PI / 2}rad)`;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\taccumulatedPoints += path.bezierCurvePoints.length;\n\t\t}\n\t}\n\n\tfunction pausePath() {\n\t\tisPlaying = false;\n\t\tif (intervalId) {\n\t\t\tclearInterval(intervalId);\n\t\t\tintervalId = null;\n\t\t}\n\t\twasPaused = true;\n\t\tisStartingFromBeginning = false;\n\t}\n\n\t$: {\n\t\tif (!isPlaying && wasPaused) {\n\t\t\tconst totalPaths = $paths.length;\n\t\t\tconst pathIndex = Math.floor(linearScrubValue / 100 * totalPaths);\n\t\t\tconst pathProgress = (linearScrubValue / 100 * totalPaths) - pathIndex;\n\t\t\tconst adjustedProgress = pathProgress < 0.5 ? 2 * pathProgress * pathProgress : -1 + (4 - 2 * pathProgress) * pathProgress;\n\t\t\tscrubValue = ((pathIndex + adjustedProgress) / totalPaths) * 100;\n\t\t\tcurrentPathIndex = pathIndex;\n\t\t\tprogress = adjustedProgress;\n\n\n\t\t\tupdateRobotPosition();\n\t\t}\n\t}\n\n\t$: {\n\t\tconst robotElement = document.getElementById('robot');\n\t\tif (robotElement) {\n\t\t\trobotElement.style.transition = isPlaying ? `transform ${animInterval}ms linear` : 'none';\n\t\t\trobotElement.style.filter = isPlaying ? `blur(${motionBlurAmount * 10}px)` : 'none';\n\t\t}\n\t}\n\n\n\n\tdocument.addEventListener('DOMContentLoaded', () => {\n\t\taddPath();\n\t\tgenerateBezierCurve($paths.length - 1);\n\t});\n\n\tdocument.addEventListener('mousedown', (event) => {\n\t\tconst field = document.querySelector('.field');\n\t\tconst rect = field.getBoundingClientRect();\n\t\tconst mouseX = event.clientX - rect.left;\n\t\tconst mouseY = event.clientY - rect.top;\n\n\t\tlet selectedPathId = null;\n\t\tlet selectedPointIndex = null;\n\t\tlet selectedPathId2 = null;\n\t\tlet selectedPointIndex2 = null;\n\n\t\t$paths.forEach((path) => {\n\t\t\tpath.controlPoints.forEach((point, index) => {\n\t\t\t\tconst pointX = point.x / 144 * rect.width;\n\t\t\t\tconst pointY = rect.height - (point.y / 144 * rect.height);\n\t\t\t\tconst distance = Math.sqrt((mouseX - pointX) ** 2 + (mouseY - pointY) ** 2);\n\t\t\t\tif (distance < 10) {\n\t\t\t\t\tif (selectedPathId === null && selectedPointIndex === null) {\n\t\t\t\t\t\tselectedPathId = path.id;\n\t\t\t\t\t\tselectedPointIndex = index;\n\t\t\t\t\t} else if (autoLinkPaths && selectedPathId2 === null && selectedPointIndex2 === null) {\n\t\t\t\t\t\tselectedPathId2 = path.id;\n\t\t\t\t\t\tselectedPointIndex2 = index;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tif (selectedPathId !== null && selectedPointIndex !== null) {\n\t\t\tconst movePoint = (moveEvent) => {\n\t\t\t\tconst newMouseX = moveEvent.clientX - rect.left;\n\t\t\t\tconst newMouseY = moveEvent.clientY - rect.top;\n\t\t\t\tconst newX = newMouseX / rect.width * 144;\n\t\t\t\tconst newY = 144 - (newMouseY / rect.height * 144);\n\n\t\t\t\tpaths.update(paths => {\n\t\t\t\t\tconst path = paths.find(p => p.id === selectedPathId);\n\t\t\t\t\tif (path) {\n\t\t\t\t\t\tpath.controlPoints[selectedPointIndex] = { x: newX, y: newY };\n\t\t\t\t\t\tpath.bezierCurvePoints = calculateBezier(path.controlPoints, 100);\n\t\t\t\t\t}\n\t\t\t\t\tif (autoLinkPaths && selectedPathId2 !== null && selectedPointIndex2 !== null) {\n\t\t\t\t\t\tconst path2 = paths.find(p => p.id === selectedPathId2);\n\t\t\t\t\t\tif (path2) {\n\t\t\t\t\t\t\tpath2.controlPoints[selectedPointIndex2] = { x: newX, y: newY };\n\t\t\t\t\t\t\tpath2.bezierCurvePoints = calculateBezier(path2.controlPoints, 100);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn paths;\n\t\t\t\t});\n\n\t\t\t\tupdateRobotPosition();\n\t\t\t};\n\n\t\t\tconst stopMove = () => {\n\t\t\t\tdocument.removeEventListener('mousemove', movePoint);\n\t\t\t\tdocument.removeEventListener('mouseup', stopMove);\n\t\t\t};\n\n\t\t\tdocument.addEventListener('mousemove', movePoint);\n\t\t\tdocument.addEventListener('mouseup', stopMove);\n\t\t}\n\t});\n\n\tlet autoLinkPaths = true;\n\n\tfunction checkAutoLinkControlPoints() {\n\t\tif (autoLinkPaths) {\n\t\t\tpaths.update(paths => {\n\t\t\t\tfor (let i = 0; i < paths.length - 1; i++) {\n\t\t\t\t\tconst currentPath = paths[i];\n\t\t\t\t\tconst nextPath = paths[i + 1];\n\t\t\t\t\tif (currentPath.controlPoints.length > 0 && nextPath.controlPoints.length > 0) {\n\t\t\t\t\t\tconst lastPoint = currentPath.controlPoints[currentPath.controlPoints.length - 1];\n\t\t\t\t\t\tnextPath.controlPoints[0] = { ...lastPoint };\n\t\t\t\t\t\tnextPath.bezierCurvePoints = calculateBezier(nextPath.controlPoints, 100);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn paths;\n\t\t\t});\n\t\t}\n\t}\n\n\t$: {\n\t\tcheckAutoLinkControlPoints();\n\t\tupdateRobotPosition();\n\t\tgenerateBezierCurve(1);\n\t}\n\n\n\n\n\n</script>\n  \n<style>\n\t* {\n\t\tfont-family: \"Nunito\", serif;\n\t\tfont-optical-sizing: auto;\n\t\tfont-weight: 600;\n\t\tfont-style: normal;\n\t}\n\n\th1 {\n\t\ttext-align: center;\n\t\tfont-size: 1rem;\n\t}\n\n\t.page-title {\n\t\tfont-size: 1.25rem;\n\t\tpadding: 0.3rem;\n\t\tmargin-left: 0.5rem;\n\t\n\t}\n\n\n\n\t.container {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\twidth: 100%;\n\t\tmin-width: 100%;\n\t\tmax-height: 85vh;\n\t}\n\n\t.container > * {\n\t\tmargin: 0.3rem;\n\t\tbox-shadow: 4px 4px 8px rgba(0, 0, 0, 0.3);\n\t\tborder-radius: 10px;\n\t\t\n\t}\n\n\t.field {\n\t\tposition: relative;\n\t\twidth: 80vh;\n\t\theight: 80vh;\n\t\tmax-width: 80vh;\n\t\tmax-height: 80vh;\n\t\tmin-width: 40vh;\n\t\tmin-height: 40vh;\n\t\tbackground: url('https://jwhof.github.io/jpather/good-field-image.png') no-repeat center center;\n\t\tbackground-size: cover;\n\t\tborder: 1px solid #ccc;\n\t}\n\n\t.point {\n\t\tposition: absolute;\n\t\twidth: 2%;\n\t\theight: 2%;\n\t\tborder-radius: 50%;\n\t\ttransform: translate(-50%, 50%);\n\t\tz-index: 2;\n\t}\n\n\t.point:hover {\n\t\twidth: 3%;\n\t\theight: 3%;\n\t\tcursor: grab;\n\t}\n\n\t.curve {\n\t\tstroke-width: 0.7;\n\t\tfill: none;\n\t\tposition: absolute;\n\t\tz-index: 3;\n\t}\n\n\t\n\n\t.robot-options-menu {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: left;\n\t\tpadding: 1rem;\n\t\tflex-grow: 1;\n\t\theight: 45vh;\n\t}\n\n\n\t.robot-options-menu > * {\n\t\tmargin: 0.5rem;\n\t}\n\n\t.section-title {\n\t\tfont-size: 1.25rem;\n\t\tfont-weight: bold;\n\t\tmargin-top: 0;\n\t}\n\n\t.paths {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tjustify-content: left;\n\t\talign-items: flex-start;\n\t\tpadding: 1rem;\n\t\tflex-grow: 1;\n\t\tmax-height: 80vh;\n\t\toverflow-y: auto;\n\t}\n\n\t.paths > * {\n\t\tmargin: 0.5rem;\n\t}\n\n\t.header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tpadding: 0.1rem;\n\t\tbackground: rgb(255, 255, 255);\n\t\theight: 2.5rem;\n\t}\n\n\tbutton {\n\t\tbackground: #B1F0F7;\n\t\tborder: none;\n\t\tpadding: 0.5rem 1rem;\n\t\tborder-radius: 5px;\n\t\tcursor: pointer;\n\t\tfont-size: 0.75rem;\n\t}\n\n\tbutton:hover {\n\t\tbackground: #8EDCE6 !important;\n\t}\n\n\t.path {\n\t\tmargin: 0rem;\n\t\tmargin-bottom: 0.3rem;\n\t\tborder-radius: 10px;\n\t\tborder: 4px solid;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: calc(100% - 8px); /* Adjust width to prevent overflow */\n\t}\n\n\t.path-header {\n\t\tdisplay: flex;\n\t\tjustify-content: space-between;\n\t\talign-items: center;\n\t\tflex-direction: row;\n\t\tborder:none;\n\t\theight: 2rem;\n\t\tmargin: 0.5rem;\n\t}\n\n\t.path-control-points {\n\t\tdisplay: block;\n\t\tmargin: 0.5rem;\n\t}\n\n\t.standard-input-box {\n\t\twidth: 125px;\n\t}\n\n\t\n\t.color-circle {\n\t\t-webkit-appearance: none;\n\t\t-moz-appearance: none;\n\t\tappearance: none;\n\t\twidth: 20px;\n\t\theight: 20px;\n\t\tborder: none;\n\t\tcursor: pointer;\n\t\tmargin: 0.75rem;\n\t\t\n\t}\n\n\t.color-circle::-webkit-color-swatch {\n\t\tborder-radius: 20px;\n\t\tborder: none;\n\t}\n\n\t.path-and-color {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t.add-and-remove {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t.add-and-remove > svg {\n\t\tcursor: pointer;\n\t\tmargin: 0.1rem;\n\t}\n\n\t.path-and-color > .path-title {\n\t\tfont-weight: bold;\n\t}\n\n\t.control-point-box > label {\n\t\tfont-size: 0.75rem;\n\t\tfont-weight: 750;\n\t}\n\n\t.control-point-mini-box {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tflex-direction: row;\n\t}\n\n\t.control-point-mini-box-x > input {\n\t\tfont-size: 0.75rem;\n\t\tfont-weight: 750;\n\t\tmargin:0rem;\n\t}\n\t\n\t\n\t.control-point-mini-box-y > input {\n\t\tfont-size: 0.75rem;\n\t\tfont-weight: 750;\n\t\tmargin:0rem;\n\t}\n\t\n\n\t.control-point-mini-box-x, .control-point-mini-box-y {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tmargin: 0.1rem;\n\t\tflex-direction: row;\n\t}\n\t.control-point-mini-box-x > label {\n\t\tfont-size: 0.75rem;\n\t\tfont-weight: 750;\n\t}\n\t\n\t.control-point-mini-box-y > label {\n\t\tfont-size: 0.75rem;\n\t\tfont-weight: 750;\n\t}\n\n\t.cp-x {\n\t\tmargin: 0.3rem;\n\t\tfont-weight: 400 !important;\n\t}\n\n\t.cp-y {\n\t\tmargin: 0.3rem;\n\t\tfont-weight: 400 !important;\n\t}\n\n\t.robot-options > label {\n\t\tfont-size:0.75rem;\n\t\tmargin: 0.2rem;\n\t}\n\n\t.robot-options > input {\n\t\tfont-size: 0.75rem;\n\t}\n\n\t.scrubbing-bar {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tbackground: white;\n\t\tpadding: 0.5rem;\n\t\tborder-radius: 5px;\n\n\t\tmargin: 0.3rem;\n\t\tbox-shadow: 4px 4px 8px rgba(0, 0, 0, 0.3);\n\t\tborder-radius: 10px;\n\t\t\n\t}\n\n\t.scrubbing-bar input[type=\"range\"] {\n\t\tmargin: 0.3rem;\t\t\n\t\t-webkit-appearance: none;\n\t\tappearance: none;\n\t\tpadding: 0rem;\n\t\tbackground: rgb(239, 238, 238);\n\t\tborder-radius: 12.5px;\n\t\toutline: none;\n\t\twidth: 100%;\n\t\tborder: transparent;\n\t\talign-items: center;\n\t}\n\n\t.scrubbing-bar input[type=\"range\"]::-webkit-slider-thumb {\n\t\t-webkit-appearance: none;\n\t\tappearance: none;\n\t\twidth: 20px;\n\t\theight: 20px;\n\t\tbackground: #B1F0F7;\n\t\tborder-radius: 50%;\n\t\tcursor: pointer;\n\t}\n\n\t.scrubbing-bar input[type=\"range\"]::-moz-range-thumb {\n\t\twidth: 20px;\n\t\theight: 20px;\n\t\tbackground: #B1F0F7;\n\t\tborder-radius: 50%;\n\t\tcursor: pointer;\n\t}\n\n\t.scrubbing-bar input[type=\"range\"]::-ms-thumb {\n\t\twidth: 20px;\n\t\theight: 20px;\n\t\tbackground: #B1F0F7;\n\t\tborder-radius: 50%;\n\t\tcursor: pointer;\n\t}\n\n\t.play-button {\n\t\tcursor: pointer;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t}\n\n\t.footer {\n\t\twidth: 100%;\n\t}\n\n\t.section-title {\n\t\tmargin-bottom: 0.5rem;\n\t\tmargin-top: 0.5rem;\n\t}\n\n\t.advanced-options {\n\t\tdisplay: flex;\n\t\tflex-direction: row;\n\t\talign-items: center;\n\t\tmargin: 0.5rem;\n\t}\n\n\t.advanced-options > label {\n\t\tfont-size:0.75rem;\n\t\tmargin: 0.2rem;\n\t}\n\n\t.advanced-options > input {\n\t\tfont-size: 0.75rem;\n\t\tmargin: 0rem;\n\t}\n\n\t#field-options {\n\t\tmargin-top: 1rem;\n\t}\n\n\t#advanced-options {\n\t\tmargin-top: 1rem;\n\t}\n\n\t#robot {\n\t\tposition: absolute;\n\t\ttransform: translate(-50%, 50%) rotate(90deg);\n\t\tz-index: 0;\n\t\tuser-select: none;\n\t}\n\n\timg {\n\t\tposition: absolute;\n\t\ttransform: translate(-50%, 50%);\n\t\tz-index: 0;\n\t}\n\n\tpolyline {\n\t\tposition: absolute;\n\t\tz-index: 1;\n\t}\n\n\t#robotUnits {\n\t\tfont-size: 0.75rem;\n\t\twidth: auto;\n\t}\n\t\n\t.standard-input-box {\n\t\twidth: 100px;\n\t}\n\n\t.start-pos-box {\n\t\twidth: 50px;\n\t}\n\n\t#robot-heading {\n\t\tfont-size: 0.75rem;\n\t\twidth: auto;\n\t\tmargin-bottom: 0rem;\n\t\theight:27.59px;\n\t\tmargin-left:10px;\n\t}\n\n\t#reverse {\n\t\tmargin-bottom: 0rem;\n\t}\n\n\t.control-point-mini-box > label {\n\t\tfont-size: 0.75rem;\n\t\tmargin: 4px;\n\t\tmargin-top: 0px;\n\t\tmargin-bottom: 0px;\n\t\tfont-weight: 750;\n\t}\n\n\t#start-angle, #end-angle, #constant-angle {\n\t\tfont-size:0.75rem;\n\t\tfont-weight: 750;\n\t\twidth: 65px;\n\t\tmargin-bottom: 0rem;\n\t\tmargin-left: 4px;\n\t}\n\n</style>\n\n<div>\n\t<div class=\"header\">\n\t\t<h1 class=\"page-title\">JPather</h1>\n\t\t<div class=\"export-import\">\n\t\t\t<button on:click={importControlPoints} style=\"user-select:none;\">Import Control Points</button>\n\t\t\t<button on:click={exportControlPoints} style=\"user-select:none;\">Export Control Points</button>\n\t\t</div>\n\t</div>\n\n\t<div class=\"main-content\">\n\t\n\t\t<div class=\"container\">\n\t\t\t<div class=\"settings-column\">\n\t\t\t\t<div class=\"robot-options-menu\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2 class=\"section-title\" style=\"user-select:none;\">Robot Options</h2>\n\n\t\t\t\t\t\t<div class=\"robot-options\">\n\t\t\t\t\t\t\t<label for=\"robotUnits\" style=\"user-select:none;\">Units:</label>\n\t\t\t\t\t\t\t<select id=\"robotUnits\" class=\"standard-input-box\" bind:value={robotUnits}>\n\t\t\t\t\t\t\t\t<option value=\"inches\">Inches</option>\n\t\t\t\t\t\t\t\t<option value=\"cm\">Centimeters</option>\n\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"robot-options\">\n\t\t\t\t\t\t\t<label for=\"robot-length\" style=\"user-select:none;\">Robot Length:</label>\n\t\t\t\t\t\t\t<input id=\"robot-length\" class=\"standard-input-box\" type=\"number\" step=\"0.01\" bind:value={displayLength} />\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"robot-options\">\n\t\t\t\t\t\t\t<label for=\"robot-width\" style=\"user-select:none;\">Robot Width:</label>\n\t\t\t\t\t\t\t<input id=\"robot-width\" class=\"standard-input-box\" type=\"number\" step=\"0.01\" bind:value={displayWidth} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\n\n\t\t\t\t\t\t<h2 id=\"field-options\" class=\"section-title\" style=\"user-select:none;\">Field Options</h2>\n\n\t\t\t\t\t\t<!-- svelte-ignore a11y-label-has-associated-control -->\n\t\t\t\t\t\t<label style=\"user-select:none;\">Starting Position:</label>\n\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div class=\"control-point-mini-box\">\n\t\t\t\t\t\t\t<div class=\"control-point-mini-box-x\">\n\t\t\t\t\t\t\t\t<!-- svelte-ignore a11y-label-has-associated-control -->\n\t\t\t\t\t\t\t\t<label class=\"cp-x\" style=\"user-select:none;\">X:</label>\n\t\t\t\t\t\t\t\t{#if $paths.length > 0}\n\t\t\t\t\t\t\t\t<input class=\"start-pos-box\" type=\"number\" step=\"0.01\" bind:value={$paths[0].controlPoints[0].x} on:input={() => updateRobotPosition()}/>\n\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"control-point-mini-box-y\">\n\t\t\t\t\t\t\t\t<!-- svelte-ignore a11y-label-has-associated-control -->\n\t\t\t\t\t\t\t\t<label class=\"cp-x\" style=\"user-select:none;\">Y:</label>\n\t\t\t\t\t\t\t\t{#if $paths.length > 0}\n\t\t\t\t\t\t\t\t<input class=\"start-pos-box\" type=\"number\" step=\"0.01\" bind:value={$paths[0].controlPoints[0].y} on:input={() => updateRobotPosition()}/>\n\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\t\n\n\t\t\t\t\t\t<h2 id=\"advanced-options\" class=\"section-title\" style=\"user-select:none;\">Advanced Options</h2>\n\t\t\t\t\t\t<div class=\"advanced-options\">\n\t\t\t\t\t\t\t<label for=\"field-length\" style=\"user-select:none;\">Infinite Path Looping: </label>\n\t\t\t\t\t\t\t<input id=\"auto-link-paths\" type=\"checkbox\" bind:checked={shouldRepeatPath} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"advanced-options\">\n\t\t\t\t\t\t\t<label for=\"field-length\" style=\"user-select:none;\">Auto-link Paths:</label>\n\t\t\t\t\t\t\t<input id=\"auto-link-paths\" type=\"checkbox\" bind:checked={autoLinkPaths} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"field\">\n\t\t\t\t{#each $paths as path}\n\t\t\t\t\t{#each path.controlPoints as { x, y }}\n\t\t\t\t\t<div class=\"hover-point\">\n\t\t\t\t\t\t<div class=\"point\" style=\"left: {x / 144 * 100}%; bottom: {y / 144 * 100}%; background: {path.color};\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/each}\n\t\t\t\t{/each}\n\n\t\t\t\t\n\t\t\t\t{#if $paths.length > 0}\n\t\t\t\t\t<img src=\"./robot.png\" alt=\"Robot\" id=\"robot\" style=\"width: {robotWidth / 144 * 100}%; height: {robotLength / 144 * 100}%; left: {(robotX / 144) * 100}%; bottom: {(robotY / 144) * 100}%; user-select: none;\" />\n\t\t\t\t{/if}\n\n\t\t\t\n\t\t\t\t\t<svg viewBox=\"0 0 144 144\" width=\"100%\" height=\"100%\" style=\"position: absolute; top: 0; left: 0;\">\n\t\t\t\t\t\t{#each $paths as path}\n\t\t\t\t\t\t\t<polyline\n\t\t\t\t\t\t\t\tclass=\"curve\"\n\t\t\t\t\t\t\t\tpoints=\"{path.bezierCurvePoints.map(point => `${point.x},${144 - (point.y)}`).join(' ')}\"\n\t\t\t\t\t\t\t\tstyle=\"stroke: {path.color};\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/each}\n\t\t\t\t\t</svg>\n\n\n\t\t\t</div>\n\t\t\t\n\t\t\t<div class=\"paths\">\n\t\t\t\t{#each $paths as path}\n\t\t\t\t\t<div class=\"path\" style=\"border-color: {path.color};\">\n\t\t\t\t\t\t<div class=\"path-header\">\n\t\t\t\t\t\t\t<div class=\"path-and-color\">\n\t\t\t\t\t\t\t\t<!-- svelte-ignore a11y-click-events-have-key-events -->\n\t\t\t\t\t\t\t\t<!-- svelte-ignore a11y-no-static-element-interactions -->\n\t\t\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill={(!(path.id == 0 || path.id == $paths.length - 1)) ? \"black\" : \"gray\"} style=\"cursor: {(!(path.id == 0 || path.id == $paths.length - 1)) ? 'pointer' : 'default'}\" on:click={() => { if (!(path.id == 0 || path.id == $paths.length - 1)) { const temp = $paths[path.id + 1]; $paths[path.id + 1] = { ...$paths[path.id], id: path.id + 1 }; $paths[path.id] = { ...temp, id: path.id }; paths.set($paths); checkAutoLinkControlPoints();}}}><path d=\"M480-240 240-480l56-56 144 144v-368h80v368l144-144 56 56-240 240Z\"/></svg>\n\t\t\t\t\t\t\t\t<!-- svelte-ignore a11y-click-events-have-key-events -->\n\t\t\t\t\t\t\t\t<!-- svelte-ignore a11y-no-static-element-interactions -->\n\t\t\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill={!(path.id == 0 || path.id == 1) ? \"black\" : \"gray\"} style=\"cursor: {!(path.id == 0 || path.id == 1) ? 'pointer' : 'default'}\" on:click={() => { if (!(path.id == 0 || path.id == 1)) { const temp = $paths[path.id - 1]; $paths[path.id - 1] = { ...$paths[path.id], id: path.id - 1 }; $paths[path.id] = { ...temp, id: path.id }; paths.set($paths); checkAutoLinkControlPoints();}}}><path d=\"M440-240v-368L296-464l-56-56 240-240 240 240-56 56-144-144v368h-80Z\"/></svg>\n\t\t\t\t\t\t\t\t<input type=\"color\" class=\"color-circle\" style=\"background-color: {path.color};\" bind:value={path.color} on:input={() => updatePathColor(path.id, path.color)} />\n\t\t\t\t\t\t\t\t<p class=\"path-title\" style=\"user-select:none;\">Path {path.id + 1}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<!-- svelte-ignore a11y-no-static-element-interactions -->\n\t\t\t\t\t\t\t<!-- svelte-ignore a11y-no-static-element-interactions -->\n\t\t\t\t\t\t\t<div class=\"add-and-remove\">\n\t\t\t\t\t\t\t\t<!-- svelte-ignore a11y-click-events-have-key-events -->\n\t\t\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill={($paths.length > 1) ? \"#FF474D\" : \"gray\"} on:click={() => { if ($paths.length > 1) deletePath(path.id); }} style=\"cursor: {($paths.length > 1) ? 'pointer' : 'default'};\"><path d=\"M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z\"/></svg>\n\t\t\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"#90EE90\" on:click={() => addControlPointToPathWithIndex(path.id, path.controlPoints.length - 1)} on:keydown={(e) => { if (e.key === 'Enter') addControlPointToPathWithIndex(path.id, path.controlPoints.length - 1); }} style=\"cursor: pointer;\"><path d=\"M440-280h80v-160h160v-80H520v-160h-80v160H280v80h160v160Zm40 200q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z\"/></svg>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"path-control-points\">\n\t\t\t\t\t\t\t\t{#each path.controlPoints as { x, y }, i}\n\t\t\t\t\t\t\t\t\t<div class=\"control-point-box\">\n\t\t\t\t\t\t\t\t\t\t{#if (i == 0)}\n\t\t\t\t\t\t\t\t\t\t\t<label for=\"control-point-{path.id}-{i}\" style=\"user-select:none;\">Endpoint:</label>\n\t\t\t\t\t\t\t\t\t\t{:else if (i > 0 && i!=path.controlPoints.length-1)}\n\t\t\t\t\t\t\t\t\t\t\t<label for=\"control-point-{path.id}-{i}\" style=\"user-select:none;\">Control Point {i}:</label>\n\t\t\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t\t\t{#if i > 0 && i!=path.controlPoints.length-1}\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"control-point-mini-box\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"control-point-mini-box-x\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<label class=\"cp-x\" for=\"control-point-{path.id}-{i}\" style=\"user-select:none;\">X:</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input id=\"cp-input\" class=\"standard-input-box\" type=\"number\" step=\"0.01\" bind:value={path.controlPoints[i].x} on:input={() => generateBezierCurve(path.id)} />\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"control-point-mini-box-y\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<label class=\"cp-y\" for=\"control-point-{path.id}-{i}-y\" style=\"user-select:none;\">Y:</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input id=\"cp-input\" class=\"standard-input-box\" type=\"number\" step=\"0.01\" bind:value={path.controlPoints[i].y} on:input={() => generateBezierCurve(path.id)} />\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t\t{#if (i > 0)}\n\t\t\t\t\t\t\t\t\t\t\t<!-- svelte-ignore a11y-no-static-element-interactions -->\n\t\t\t\t\t\t\t\t\t\t\t<!-- svelte-ignore a11y-click-events-have-key-events -->\n\n\n\t\t\t\t\t\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"#FF474D\" on:click={() => { if (path.controlPoints.length > 2) { path.controlPoints.splice(i, 1); generateBezierCurve(path.id); paths.set($paths); } }} style=\"cursor: pointer;\"><path d=\"M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z\"/></svg>\n\t\t\t\t\t\t\t\t\t\t\t{/if}\n\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{:else if (i==0)}\n\t\t\t\t\t\t\t\t\t\t<div class=\"control-point-mini-box\">\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"control-point-mini-box-x\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label class=\"cp-x\" for=\"control-point-{path.id}-{i}\" style=\"user-select:none;\">X:</label>\n\t\t\t\t\t\t\t\t\t\t\t\t<input id=\"control-point-{path.id}-{i}\" class=\"standard-input-box\" type=\"number\" step=\"0.01\" bind:value={path.controlPoints[path.controlPoints.length-1].x} on:input={() => generateBezierCurve(path.id)} />\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div class=\"control-point-mini-box-y\">\n\t\t\t\t\t\t\t\t\t\t\t\t<label class=\"cp-y\" for=\"control-point-{path.id}-{i}-y\" style=\"user-select:none;\">Y:</label>\n\t\t\t\t\t\t\t\t\t\t\t\t<input id=\"control-point-{path.id}-{i}-y\" class=\"standard-input-box\" type=\"number\" step=\"0.01\" bind:value={path.controlPoints[path.controlPoints.length-1].y} on:input={() => generateBezierCurve(path.id)} />\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<!-- svelte-ignore a11y-click-events-have-key-events -->\n\t\t\t\t\t\t\t\t\t\t\t<select id=\"robot-heading\" class=\"standard-input-box\" bind:value={path.robotHeading} on:change={() => generateBezierCurve(path.id)}>\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"tangential\">Tangential</option>\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"linear\">Linear</option>\n\t\t\t\t\t\t\t\t\t\t\t\t<option value=\"constant\">Constant</option>\n\t\t\t\t\t\t\t\t\t\t\t</select>\n\t\n\t\t\t\t\t\t\t\t\t\t\t{#if path.robotHeading === 'linear'}\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"control-point-mini-box\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input id=\"start-angle\" class=\"standard-input-box\" type=\"number\" step=\"0.01\" bind:value={path.startAngle}  on:input={() => updateRobotPosition()}/>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"control-point-mini-box\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input id=\"end-angle\" class=\"standard-input-box\" type=\"number\" step=\"0.01\" bind:value={path.endAngle} on:input={() => updateRobotPosition()}/>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t{:else if path.robotHeading === 'tangential'}\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"control-point-mini-box\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<label for=\"reverse\" style=\"user-select:none;\">Reverse:</label>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input id=\"reverse\" type=\"checkbox\" bind:checked={path.reverse} on:input={() => updateRobotPosition()}/>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t{:else if path.robotHeading === 'constant'}\n\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"control-point-mini-box\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<input id=\"constant-angle\" class=\"standard-input-box\" type=\"number\" step=\"0.01\" bind:value={path.constantAngle} on:input={() => updateRobotPosition()}/>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t{/if}\n\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t{/each}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t{/each}\n\n\t\t\t\t<button on:click={() => {addPath(); generateBezierCurve($paths.length - 1);}} style=\"user-select:none;\">Add Path</button>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"footer\">\n\t\t\t<div class=\"scrubbing-bar\">\n\t\t\t\t<div class=\"play-button\">\n\t\t\t\t\t<!-- svelte-ignore a11y-click-events-have-key-events -->\n\t\t\t\t\t<!-- svelte-ignore a11y-no-static-element-interactions -->\n\t\t\t\t\t{#if !isPlaying}\n\t\t\t\t\t \t<!-- svelte-ignore a11y-no-static-element-interactions -->\n\t\t\t\t\t \t<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"#90EE90\" on:click={playPath}><path d=\"M320-200v-560l440 280-440 280Zm80-280Zm0 134 210-134-210-134v268Z\"/></svg>\n\t\t\t\t\t{:else}\n\t\t\t\t\t\t<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"#FF474D\" on:click={pausePath}><path d=\"M520-200v-560h240v560H520Zm-320 0v-560h240v560H200Zm400-80h80v-400h-80v400Zm-320 0h80v-400h-80v400Zm0-400v400-400Zm320 0v400-400Z\"/></svg>\n\t\t\t\t\t{/if}\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<input type=\"range\" id=\"scrub\" min=\"0\" max=\"100\" step=\"0.001\" bind:value={linearScrubValue} on:input={updateRobotPosition} />\n\t\t\t</div>\n\t\t</div>\n\n\t\t\n\n\n\t</div>\n</div>\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {\n\t\tname: 'world'\n\t}\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","set_store_value","ret","value","set","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","removeAttribute","getAttribute","setAttribute","to_number","set_input_value","input","set_style","key","important","style","removeProperty","setProperty","select_option","select","mounting","option","__value","selected","undefined","selectedIndex","select_value","selected_option","querySelector","set_current_component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","e","pop","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","destroy_component","filtered","targets","c","indexOf","flush_render_callbacks","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_mount","on_disconnect","context","Map","skip_bound","root","ready","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","block","delete","local","customElement","m","new_on_destroy","map","filter","mount_component","SvelteComponent","$destroy","this","$on","type","index","splice","$set","$$props","obj","$$set","keys","subscriber_queue","controlPoints","x","y","div0","color","div1","each_value_4","element_src","url","href","img","polyline","polyline_points_value","bezierCurvePoints","func","join","id","label","robotHeading","create_if_block_4","create_if_block_5","create_if_block_6","select_change_handler_1","div2","label0","input0","label1","input1","option0","option1","option2","if_block","svg","path_1","create_if_block_2","div","constantAngle","checked","reverse","startAngle","endAngle","create_if_block_7","create_if_block_8","create_if_block_1","create_if_block_3","each_value_1","svg0","svg0_fill_value","svg2","svg2_fill_value","div4","path0","svg1","path1","path2","svg3","path3","div3","set_data","t4","t4_value","create_if_block_11","create_if_block_10","create_if_block_9","create_if_block","call","div20","h1","button0","button1","div19","div15","div12","div11","div10","h20","label2","h21","label3","div7","div5","label4","div6","label5","h22","div8","label6","input2","div9","label7","input3","div13","div14","button2","div18","div17","div16","input4","calculateBezier","points","steps","curve","t","deCasteljau","newPoints","point","paths","start","stop","subscribers","new_value","run_queue","subscriber","invalidate","size","writable","displayLength","displayWidth","robotLength","robotWidth","robotUnits","generateBezierCurve","pathId","path","find","addPath","newPath","Math","floor","random","lastPath","lastControlPoint","angle","PI","distance","cos","sin","addControlPointToPathWithIndex","console","log","updatePathColor","deletePath","updatedPaths","scrubValue","robotX","robotY","isPlaying","wasPaused","isStartingFromBeginning","intervalId","progress","elapsedTime","pathAnimTime","linearScrubValue","currentPathIndex","pathStartTime","shouldRepeatPath","updateRobotPosition","totalPoints","$paths","accumulatedPoints","relativeScrubValue","pointIndex","robotElement","getElementById","nextPoint","min","prevPoint","max","atan2","transform","pausePath","$$invalidate","clearInterval","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","selectedPathId","selectedPointIndex","selectedPathId2","selectedPointIndex2","pointX","width","pointY","height","sqrt","autoLinkPaths","movePoint","moveEvent","newMouseX","newMouseY","newX","newY","stopMove","checkAutoLinkControlPoints","currentPath","nextPath","lastPoint","conversionFactor","animTime","totalPaths","pathIndex","pathProgress","adjustedProgress","transition","json","JSON","stringify","blob","Blob","URL","createObjectURL","link","download","click","accept","onchange","async","file","files","parse","Date","now","setInterval","temp","body"],"mappings":"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","x_google_ignoreList":[0,1]}